class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        //Map<Character,Integer> map1 = new HashMap<>();
        Map<Character,Integer> map2 = new HashMap<>();
        for(int i =0;i<magazine.length();i++){
            if(map2.containsKey(magazine.charAt(i)))
                map2.put(magazine.charAt(i),map2.get(magazine.charAt(i))+1);
            else
                map2.put(magazine.charAt(i),1);
        }
        for(int i =0;i<ransomNote.length();i++){
            if(map2.containsKey(ransomNote.charAt(i))){
                map2.put(ransomNote.charAt(i),map2.get(ransomNote.charAt(i))-1);
                if(map2.get(ransomNote.charAt(i))<0){
                    return false;
                }
                
            }
                
            else
                return false;
        }
        return true;
        
        
    }
}
--------------------------------------------------------------
public class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] arr = new int[26];
        for (int i = 0; i < magazine.length(); i++) {
            arr[magazine.charAt(i) - 'a']++;
        }
        for (int i = 0; i < ransomNote.length(); i++) {
            if(--arr[ransomNote.charAt(i)-'a'] < 0) {
                return false;
            }
        }
        return true;
    }
}
-------------------------------------------------------------------
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        return not collections.Counter(ransomNote) - collections.Counter(magazine)
